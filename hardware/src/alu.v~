module alu(	input [31:0] a, b,
		input [4:0] alucontrol,
		output [31:0] y);

//00000:addu
//00001:subu
//00010:and
//00011:nor
//00100:or
//00101:xor
//00110:pass B
//00111:?     	//pass A?
//01000:?
//01001:sll  	//use only two operations for sl/sr?
//01010:srl
//01011:sra
//01110:slt
//01111:sltu
//11000:?
//11001:?
//11010:beq
//11011:bne
//11100:bgtz
//11101:bgez
//11110:bltz
//11111:blez

always@(*)
	case(alucontrol)
		5'b00000: y <= $unsigned(a) + $unsigned(b);
		5'b00001: y <= $unsigned(a) - $unsigned(b);
		5'b00010: y <= a & b;
		5'b00011: y <= !(a | b);
		5'b00100: y <= a | b;
		5'b00101: y <= a ^ b;
		5'b00110: y <= b;
//		5'b00111: y <= a;
		5'b01001: y <= a << b;
		5'b01010: y <= a >> b;
		5'b01011: y <= a >>> b;

		5'b01110: y <= ( a < b ? 32'b1 : 32'b0 );
		5'b01111: y <= ( $unsigned(a) < $unsigned(b) ? 32'b1 : 32'b0);
	endcase
endmodule
