module aludec(input      [5:0] Funct,
              input      [1:0] ALUOp,
              output reg [5:0] ALUControlE);

//0000:and
//0001:or
//0010:addu
//0011:xor
//0100:pass B
//0101:nor
//0010:subu

//0011:slt
//0100:sltu
//0101:sll
//0110:srl
//0111:sra

//00010:and
//00011:nor

//11000:?
//11001:?
//11010:beq
//11011:bne
//11100:bgtz
//11101:bgez
//11110:bltz
//11111:blez


  always @(*)
	case(ALUOp)
		2'b00: ALUControlE <= 5'b00010;  // addu
	      	2'b01: ALUControlE <= 5'b110;  // subu
	      	default: case(Funct)          // RTYPE
			6'b000000: ALUControlE <= 5'; //SLL
			6'b000010: ALUControlE <= 5'; //SRL
			6'b000011: ALUControlE <= 5'; //SRA
			6'b000100: ALUControlE <= 5'; //SLLV
			6'b000110: ALUControlE <= 5'; //SRLV
			6'b000111: ALUControlE <= 5'; //SRAV
			6'b100001: ALUControlE <= 5'; //ADDU
			6'b100011: ALUControlE <= 5'; //SUBU
			6'b100100: ALUControlE <= 5'; //AND
			6'b100101: ALUControlE <= 5'; //OR
			6'b100110: ALUControlE <= 5'; //XOR
			6'b100111: ALUControlE <= 5'; //NOR
			6'b101010: ALUControlE <= 5'; //SLT
			6'b101011: ALUControlE <= 5'; //SLTU
		endcase
	endcase
endmodule
